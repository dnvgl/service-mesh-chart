# Default values for platform-service
---
# Application name
app: app        # Required

version: v1
replicaCount: 1

mergeAppMetrics: false

# sample extra label, you can add as many as you want
additionalPodLabels: {}
  # saml-idp-forward-auth-filter: enabled
# sample extra annotations
additionalPodAnnotations: {}
  # sidecar.istio.io/inject: "false"

image:
  # registry: platformteam.azurecr.io (ignored if not specified)
  registry:
  # image name without the tag
  repository:
  # image tag (i.e. 105389)
  tag:
  pullPolicy: IfNotPresent
  # name of the pullSecret for the registry if used
  pullSecret:
  containerPort: 80

# deploymentOnly -- This workload is an addon to another for the same app - only create the deployment and destination rule
deploymentOnly: false

updateStrategy: RollingUpdate

service:
  # unspecified for default microservice (for now at least)
  type:
  # port number
  port: 80
  # provide access to other services
  liveness:
    enabled: false
    path: /healthz
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3

# Health check configuration - exposes full k8s api for each probe type. See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
health:
  livenessProbe:
  readinessProbe:
  startupProbe:

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # Prefixes the service account with the release name
  useReleasePrefix: false
  # The name of the ServiceAccount to use (the actual service account name
  # will still be prefixed by the release prefix if that option is enabled.
  # If not set and create is true, a name is generated from the app
  name:

gateway:
  # map virtual service to a gateway expose this service
  exposeService: true
  # gateway name (fully qualified if in a different namespace), default one provided automatically by KubeIT
  name: gateway/one-gateway

opa:
  # set to true to enable opa.  requires config in a config map called opa-istio-config and policy in a config map called opa-policy
  enabled: false
  image: openpolicyagent/opa:0.28.0-istio

hpa:
  enabled: false
  maxReplicas: 3
  minReplicas: 1

defaultRouting:
  # Generate default virtual services and destination rules
  enabled: true

  kubeitDefaultHosts:
    enabled: false
    tenantPrefixEnabled: true
    # hostsPrefix:            # Optional - default app name

  # hosts to take into account for routing rules (ignored if allHosts = true)
  hosts: []
    # - myhost.dnvgl.com

  # list of prefixes for route matching - overrides the default prefix (app)
  urlPrefixes:

  # catch-all route - anything not routed elsewhere will be routed here
  # When this is used, urlPrefixes are ignored (there should be only catch-all route for this host & gateway)
  catchAll: false

  # Redirect when a trailing slash is not included in the URL prefix
  # This is applied for each provided urlPrefix or the default prefix if none provided
  redirectOnNoTrailingSlash: true

  # options for rewriting the URL to remove the routing prefix before delivering
  # the request to the target pod
  rewriteUrlPrefix:
    # replace the routing prefix when enabled (when disabled, the URL is not adjusted)
    enabled: true
    # replace the routing prefix with the provided string
    # alternate prefixes should begin and end with a "/"
    # examples: "/", "/api/"
    replaceWith: "/"

  # Load balancer policy
  # Also supported are:
  #   STICKY_SESSIONS: ensures each session will always hit the same pod.
  #   ROUND_ROBIN: uses the round robin algorithm for load balancing
  loadBalancerPolicy: RANDOM

  # configure retry settings - the defaults are provided in the template for backward compatibility
  # providing any settings here will override the defaults
  retries:
    enabled: true
    # settings:
    #   attempts: 3
    #   perTryTimeout: 2s

  # corsPolicy:
  #   allowOrigins:
  #     - exact: https://example.com
  #   allowMethods:
  #     - POST
  #     - GET
  #   allowCredentials: false
  #   allowHeaders:
  #     - X-Foo-Bar
  #   maxAge: "24h"

  # route from all hosts (typically only common services)
  allHosts: false

# Specify network policies
networkPolicy:
  # Enable default network policy (set false and create your own if needed)
  enabled: false

  # List of workloads allowed access to this workload. Identifiers are matched
  # to the app label.
  appsAllowedAccess:
  #  - app1
  #  - app2

# Settings for request authentication (Jwt authentication)
requestAuthentication:
  # Generate RequestAuthentication
  enabled: true

  # JwtRules - list of rules
  jwtRules:
    # JWT Rule body - these are typical
    # For full api see https://istio.io/docs/reference/config/security/jwt/#JWTRule
    - issuer: "https://sts.windows.net/.../"
      jwksUri: "https://login.microsoftonline.com/common/discovery/keys"
      audiences:
        - 22b9c23f-4a41-4729-8a5d-793f7601dfdb
        - fe494c14-85d2-4bfa-bb43-92b0ab0a4f72

sessionManagement:
  enabled: true
  redirectToLogin: false
  enabledWithRedirectLabel: "session-management: frontend"
  enabledWithoutRedirectLabel: "session-management: backend"

authorizationPolicy:
  # Generate default authorization policy
  enabled: true

  # List of authorized service principals. Valid map values are
  #   servicePrincipalName - short name to service account (required if full name not used)
  #   servicePrincipalNamespace - namespace defaults to current
  #   servicePrincipalFullName - alternative to first two - provide full service
  #     principal name (i.e. cluster.local/ns/mynamespace/sa/myserviceaccount)
  #   requireJwt - (default true) set to false to allow peer connections from
  #     this service principal without a jwt
  authorizedServices:
  # Examples:
    # 1) allow access from app "myapp" with default service account only with jwt
    # - servicePrincipalName: myapp

    # 2) allow access from app "myapp" with default service account without jwt
    # - servicePrincipalName: myapp
    #   requireJwt: false

    # 3) allow access from service account "myotherappsa" in namespace "other" (only with jwt)
    # - servicePrincipalName: myotherappsa
    #   servicePrincipalNamespace: other

    # 4) alternate form of 3
    # - servicePrincipalFullName: "cluster.local/ns/other/sa/myotherappsa"
    #   servicePrincipalNamespace: other

# Environment variables are given as a map - key is the name - either followed by the actual value
# or a valueFrom component which is literally translated
# env:
#   valueName: "the value"
#   mySecret:
#     valueFrom:
#       secretKeyRef:
#         name: mysecret
#         key: username

# OPA environment variables are given as a map - key is the name - either followed by the actual value
# or a valueFrom component which is literally translated
# opaenv:
#   envName: "envValue"

# deprecated
environmentVariables:
#  - name: Serilog__MinimumLevel
#    value: Debug
#    valueFrom:
#      secretKeyRef:
#        name: mysecret
#        key: username

# Declare any volumes: name and mountPath are used for volumeMount at the container level
# volumeDefinition string underneath is copied verbatim into volumes
volumes:
#  - name:
#    mountPath:
#    volumeDefinition: |
#      azureFile:

# Resource requests and limits for primary container in pod
resources: {}
#  requests:
#    cpu: 250m
#    memory: 64Mi
#  limits:
#    cpu: 500m
#    memory: 128Mi

# Adjust resources requested for proxy sidecar (see https://istio.io/docs/concepts/performance-and-scalability/#cpu-and-memory)
proxyResources:
  {}
  # request values are passed to the envoy proxy through annotations
  # these may be set globally at the istio level, so only override by service if necessary
  # requests:
  #   cpu: 10m
  #   memory: 64Mi
  #  limits:
  #    cpu: 10m
  #    memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

securityContext: {}
#   fsGroup: 1000
#   runAsUser: 1000
#   runAsNonRoot: true

containerSecurityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

debugEnvoyFilters: true

#kubeit: #placeholder used for kubeit parameters passed from tenant bootstrap app of apps

initContainersDefinitions: []
